{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","styled","div","_templateObject","RouteLinks","Nz","Memories","Photos","RouteComponents","Object","keys","reduce","a","c","window","location","Boolean","hostname","match","ReactDOM","render","react_default","createElement","BrowserRouter","basename","Link","to","Switch","Route","path","component","exact","Redirect","from","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+1CAIA,IAAMA,EAAMC,IAAOC,IAAVC,KA8CHC,EAAa,CACjBC,GAAI,8CACJC,SAAU,yCACVC,OAAQ,2CAEJC,EAAkBC,OAAOC,KAAKN,GAAYO,OAAO,SAACC,EAAGC,GAKzD,OAJAD,EAAEC,GAAK,WAEL,OADAC,OAAOC,SAAWX,EAAWS,GACtB,MAEFD,GACN,ICjDiBI,QACW,cAA7BF,OAAOC,SAASE,UAEe,UAA7BH,OAAOC,SAASE,UAEhBH,OAAOC,SAASE,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAT,EAAAU,cFyDD,kBACbD,EAAAT,EAAAU,cAACC,EAAA,EAAD,CAAeC,SAAS,YACtBH,EAAAT,EAAAU,cAACtB,EAAD,KACEqB,EAAAT,EAAAU,cAAA,WAEED,EAAAT,EAAAU,cAACG,EAAA,EAAD,CAAMC,GAAG,OACPL,EAAAT,EAAAU,cAAA,4BACAD,EAAAT,EAAAU,cAAA,8BAEFD,EAAAT,EAAAU,cAACG,EAAA,EAAD,CAAMC,GAAG,aACPL,EAAAT,EAAAU,cAAA,UAAK,6BACLD,EAAAT,EAAAU,cAAA,+EAIFD,EAAAT,EAAAU,cAACG,EAAA,EAAD,CAAMC,GAAG,WACPL,EAAAT,EAAAU,cAAA,2BACAD,EAAAT,EAAAU,cAAA,4KAOJD,EAAAT,EAAAU,cAACK,EAAA,EAAD,KACEN,EAAAT,EAAAU,cAACM,EAAA,EAAD,CAAOC,KAAK,MAAMC,UAAWtB,EAAgBH,KAC7CgB,EAAAT,EAAAU,cAACM,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWtB,EAAgBF,WACnDe,EAAAT,EAAAU,cAACM,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWtB,EAAgBD,SACjDc,EAAAT,EAAAU,cAACM,EAAA,EAAD,CAAOC,KAAK,IAAIE,OAAK,EAACD,UAAW,OACjCT,EAAAT,EAAAU,cAACU,EAAA,EAAD,CAAUC,KAAK,IAAIP,GAAG,UEtFd,MAASQ,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff351d2c.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link, Redirect, Switch, Route, BrowserRouter } from 'react-router-dom'\n\nconst App = styled.div`\n  background-color: #6abea7;\n  background: linear-gradient(\n    45deg,\n    rgba(189, 255, 253, 1) 0%,\n    rgba(159, 255, 245, 1) 30%,\n    rgba(124, 255, 196, 1) 100%\n  );\n\n  font-size: calc(10px + 2vmin);\n  text-align: center;\n  color: #bdfffd;\n  text-shadow: 0 2px 2px rgba(0, 0, 0, 0.14), 0 1px 5px rgba(0, 0, 0, 0.12),\n    0 3px 1px rgba(0, 0, 0, 0.2);\n\n  > div {\n    min-height: 100vh;\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n\n    h1 {\n      color: #39745a;\n    }\n\n    a {\n      text-decoration: none;\n      color: currentcolor;\n      border: 1px solid #5e6973;\n      padding: 24px;\n      margin: 12px;\n      max-width: 480px;\n      background-color: #39745a;\n\n      transition: box-shadow 0.5s;\n      box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n\n      &:hover {\n        box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2),\n          0 6px 20px 0 rgba(0, 0, 0, 0.19);\n      }\n    }\n  }\n`\n\nconst RouteLinks = {\n  Nz: 'https://photos.app.goo.gl/Jw5xbaUUmg9t3ZTw5',\n  Memories: 'https://goo.gl/forms/vN58c57ZxrroDaKk1',\n  Photos: 'https://goo.gl/photos/N1iY29VoYsTkTxmT7',\n}\nconst RouteComponents = Object.keys(RouteLinks).reduce((a, c) => {\n  a[c] = () => {\n    window.location = RouteLinks[c]\n    return null\n  }\n  return a\n}, {})\n\nexport default () => (\n  <BrowserRouter basename=\"personal\">\n    <App>\n      <div>\n        {/*<h1>Personal links</h1>*/}\n        <Link to=\"/nz\">\n          <h2>Photos from NZ</h2>\n          <p>View and comment</p>\n        </Link>\n        <Link to=\"/memories\">\n          <h2>{' Recuerdos/\\u200BMemories'}</h2>\n          <p>\n            Enter a fond memory or a fun story to add to my list of memories.\n          </p>\n        </Link>\n        <Link to=\"/photos\">\n          <h2>Upload photos</h2>\n          <p>\n            Uploaded photos will be visible to other people uploading photos.\n            Or, you can also ask me and I can send you a private link which\n            won't be visible to others.\n          </p>\n        </Link>\n      </div>\n      <Switch>\n        <Route path=\"/nz\" component={RouteComponents.Nz} />\n        <Route path=\"/memories\" component={RouteComponents.Memories} />\n        <Route path=\"/photos\" component={RouteComponents.Photos} />\n        <Route path=\"/\" exact component={null} />\n        <Redirect from=\"/\" to=\"/\" />\n      </Switch>\n    </App>\n  </BrowserRouter>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}